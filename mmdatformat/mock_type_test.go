// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anexia-it/geodbtools/mmdatformat (interfaces: Type)

// Package mmdatformat is a generated GoMock package.
package mmdatformat

import (
	geodbtools "github.com/anexia-it/geodbtools"
	gomock "github.com/golang/mock/gomock"
	io "io"
	net "net"
	reflect "reflect"
)

// MockType is a mock of Type interface
type MockType struct {
	ctrl     *gomock.Controller
	recorder *MockTypeMockRecorder
}

// MockTypeMockRecorder is the mock recorder for MockType
type MockTypeMockRecorder struct {
	mock *MockType
}

// NewMockType creates a new mock instance
func NewMockType(ctrl *gomock.Controller) *MockType {
	mock := &MockType{ctrl: ctrl}
	mock.recorder = &MockTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockType) EXPECT() *MockTypeMockRecorder {
	return m.recorder
}

// DatabaseSegmentOffset mocks base method
func (m *MockType) DatabaseSegmentOffset(arg0 geodbtools.ReaderSource, arg1 DatabaseTypeID, arg2 int64) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseSegmentOffset", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// DatabaseSegmentOffset indicates an expected call of DatabaseSegmentOffset
func (mr *MockTypeMockRecorder) DatabaseSegmentOffset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseSegmentOffset", reflect.TypeOf((*MockType)(nil).DatabaseSegmentOffset), arg0, arg1, arg2)
}

// DatabaseType mocks base method
func (m *MockType) DatabaseType() geodbtools.DatabaseType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseType")
	ret0, _ := ret[0].(geodbtools.DatabaseType)
	return ret0
}

// DatabaseType indicates an expected call of DatabaseType
func (mr *MockTypeMockRecorder) DatabaseType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseType", reflect.TypeOf((*MockType)(nil).DatabaseType))
}

// EncodeTreeNode mocks base method
func (m *MockType) EncodeTreeNode(arg0 *uint32, arg1 *geodbtools.RecordTree) ([]byte, []*geodbtools.RecordTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeTreeNode", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]*geodbtools.RecordTree)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncodeTreeNode indicates an expected call of EncodeTreeNode
func (mr *MockTypeMockRecorder) EncodeTreeNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeTreeNode", reflect.TypeOf((*MockType)(nil).EncodeTreeNode), arg0, arg1)
}

// IPVersion mocks base method
func (m *MockType) IPVersion(arg0 DatabaseTypeID) geodbtools.IPVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPVersion", arg0)
	ret0, _ := ret[0].(geodbtools.IPVersion)
	return ret0
}

// IPVersion indicates an expected call of IPVersion
func (mr *MockTypeMockRecorder) IPVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPVersion", reflect.TypeOf((*MockType)(nil).IPVersion), arg0)
}

// NewRecord mocks base method
func (m *MockType) NewRecord(arg0 geodbtools.ReaderSource, arg1 *net.IPNet, arg2 uint32) (geodbtools.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(geodbtools.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRecord indicates an expected call of NewRecord
func (mr *MockTypeMockRecorder) NewRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRecord", reflect.TypeOf((*MockType)(nil).NewRecord), arg0, arg1, arg2)
}

// NewWriter mocks base method
func (m *MockType) NewWriter(arg0 io.Writer, arg1 geodbtools.IPVersion) (geodbtools.Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter", arg0, arg1)
	ret0, _ := ret[0].(geodbtools.Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWriter indicates an expected call of NewWriter
func (mr *MockTypeMockRecorder) NewWriter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockType)(nil).NewWriter), arg0, arg1)
}

// RecordLength mocks base method
func (m *MockType) RecordLength(arg0 DatabaseTypeID) uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordLength", arg0)
	ret0, _ := ret[0].(uint)
	return ret0
}

// RecordLength indicates an expected call of RecordLength
func (mr *MockTypeMockRecorder) RecordLength(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLength", reflect.TypeOf((*MockType)(nil).RecordLength), arg0)
}
