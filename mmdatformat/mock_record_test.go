// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anexia-it/geodbtools (interfaces: Record,CountryRecord)

// Package mmdatformat is a generated GoMock package.
package mmdatformat

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockRecord is a mock of Record interface
type MockRecord struct {
	ctrl     *gomock.Controller
	recorder *MockRecordMockRecorder
}

// MockRecordMockRecorder is the mock recorder for MockRecord
type MockRecordMockRecorder struct {
	mock *MockRecord
}

// NewMockRecord creates a new mock instance
func NewMockRecord(ctrl *gomock.Controller) *MockRecord {
	mock := &MockRecord{ctrl: ctrl}
	mock.recorder = &MockRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecord) EXPECT() *MockRecordMockRecorder {
	return m.recorder
}

// GetNetwork mocks base method
func (m *MockRecord) GetNetwork() *net.IPNet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork")
	ret0, _ := ret[0].(*net.IPNet)
	return ret0
}

// GetNetwork indicates an expected call of GetNetwork
func (mr *MockRecordMockRecorder) GetNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockRecord)(nil).GetNetwork))
}

// String mocks base method
func (m *MockRecord) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockRecordMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRecord)(nil).String))
}

// MockCountryRecord is a mock of CountryRecord interface
type MockCountryRecord struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRecordMockRecorder
}

// MockCountryRecordMockRecorder is the mock recorder for MockCountryRecord
type MockCountryRecordMockRecorder struct {
	mock *MockCountryRecord
}

// NewMockCountryRecord creates a new mock instance
func NewMockCountryRecord(ctrl *gomock.Controller) *MockCountryRecord {
	mock := &MockCountryRecord{ctrl: ctrl}
	mock.recorder = &MockCountryRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCountryRecord) EXPECT() *MockCountryRecordMockRecorder {
	return m.recorder
}

// GetCountryCode mocks base method
func (m *MockCountryRecord) GetCountryCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCountryCode indicates an expected call of GetCountryCode
func (mr *MockCountryRecordMockRecorder) GetCountryCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryCode", reflect.TypeOf((*MockCountryRecord)(nil).GetCountryCode))
}

// GetNetwork mocks base method
func (m *MockCountryRecord) GetNetwork() *net.IPNet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork")
	ret0, _ := ret[0].(*net.IPNet)
	return ret0
}

// GetNetwork indicates an expected call of GetNetwork
func (mr *MockCountryRecordMockRecorder) GetNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockCountryRecord)(nil).GetNetwork))
}

// String mocks base method
func (m *MockCountryRecord) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockCountryRecordMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCountryRecord)(nil).String))
}
