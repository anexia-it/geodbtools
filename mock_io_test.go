// Code generated by MockGen. DO NOT EDIT.
// Source: io (interfaces: ReaderAt,Closer)

// Package geodbtools is a generated GoMock package.
package geodbtools

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReaderAt is a mock of ReaderAt interface
type MockReaderAt struct {
	ctrl     *gomock.Controller
	recorder *MockReaderAtMockRecorder
}

// MockReaderAtMockRecorder is the mock recorder for MockReaderAt
type MockReaderAtMockRecorder struct {
	mock *MockReaderAt
}

// NewMockReaderAt creates a new mock instance
func NewMockReaderAt(ctrl *gomock.Controller) *MockReaderAt {
	mock := &MockReaderAt{ctrl: ctrl}
	mock.recorder = &MockReaderAtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderAt) EXPECT() *MockReaderAtMockRecorder {
	return m.recorder
}

// ReadAt mocks base method
func (m *MockReaderAt) ReadAt(arg0 []byte, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt
func (mr *MockReaderAtMockRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockReaderAt)(nil).ReadAt), arg0, arg1)
}

// MockCloser is a mock of Closer interface
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
}

// MockCloserMockRecorder is the mock recorder for MockCloser
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}
