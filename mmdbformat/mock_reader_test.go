// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anexia-it/geodbtools (interfaces: Reader)

// Package mmdbformat is a generated GoMock package.
package mmdbformat

import (
	geodbtools "github.com/anexia-it/geodbtools"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockReader is a mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// LookupIP mocks base method
func (m *MockReader) LookupIP(arg0 net.IP) (geodbtools.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIP", arg0)
	ret0, _ := ret[0].(geodbtools.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIP indicates an expected call of LookupIP
func (mr *MockReaderMockRecorder) LookupIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIP", reflect.TypeOf((*MockReader)(nil).LookupIP), arg0)
}

// RecordTree mocks base method
func (m *MockReader) RecordTree(arg0 geodbtools.IPVersion) (*geodbtools.RecordTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTree", arg0)
	ret0, _ := ret[0].(*geodbtools.RecordTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordTree indicates an expected call of RecordTree
func (mr *MockReaderMockRecorder) RecordTree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTree", reflect.TypeOf((*MockReader)(nil).RecordTree), arg0)
}
